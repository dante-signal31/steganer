################################
# GENERAL CONFIGURATION
################################
language: rust
rust:
  - nightly
#  - stable
matrix:
#  allow_failures:
#    # I'm working with nightly, but it will be nice to realize when stable works too.
#    - rust: stable
  fast_finish: true
# Cache your dependencies so they are only recompiled if they or the compiler were upgraded
cache: cargo

################################
# BRANCH FILTER
################################
branches:
  only:
  - staging

################################
# RESULT NOTIFICATIONS
################################
notifications:
  recipients:
    - dante.signal31@gmail.com
  on_sucess: always
  on_failure: always

################################
# TESTING
################################
before_script:
  - cargo update
script:
  - echo "Starting tests..."
  - cargo test --verbose
  - echo "Tests done."

################################
# DEPLOYMENT
################################
jobs:
  include:
#    # Update master branch.
#    - stage: Branch merge to production branch
#      python: 3.6
#      env:
#        - PYTHONPATH="${PYTHONPATH}:${TRAVIS_BUILD_DIR}"
#      if: branch = staging
#      script:
#        - echo "Merging staging branch with master..."
#        - ci_scripts/merge_with_production
#        - echo "Merge done."
#    # Upload packages to crates.io
#    - stage: Crates.io deployment
#      script:
#        - echo "Deploying to crates.io..."
#        - cargo login $CARGO_TOKEN
#        - cargo publish --allow-dirty
#        - echo "Crates.io deployment done."
#    # Build python module an upload it to Pypi
#    - stage: Python module building
#      language: rust
#      # I need a complete virtual machine because I cannot create a virtualenv inside
#      # default virtualenv virtual machine.
#      sudo: required
#      script:
#        - echo "Deploying python module to Pypi..."
#        - sudo apt-get update
#        - sudo apt-get install python3-venv
#        - python3 -m venv env3
#        - source env3/bin/activate
#        - pip --version
#        - pip install cffi
#        - pip install pyo3-pack
#        - pyo3-pack publish -b cffi -u $PYPI_USERNAME -p $PYPI_PASSWORD
#        - echo "Python module deployed."
    # Build Debian and RPM packages and deploy them.
    - stage: Debian packaging and deployment.
      language: rust
      if: branch = staging
      script:
        # Build manpage.
        - echo "Building manpage..."
        - sudo apt-get update
        - sudo apt-get install pandoc
        - mkdir man
        - pandoc --standalone --to man README.md -o man/steganer.1
        - gzip man/steganer.1
        - echo "Manpage built."
        # Cargo-rpm needs a previous build release. It does not hurt for cargo deb so I run cargo build release first
        # of all.
        - cargo build --release
        # Build debian package.
        # Oddly it seems Travis has cargo-deb already installed, so "cargo install cargo-deb" is not needed.
        - echo "Building debian package"
        - cargo deb
        - echo "Debian package built."
        # Build rpm package.
        - echo "Building RPM package"
        - sudo apt-get install rpm
        - cargo install cargo-rpm --force
        - cargo rpm build
        - echo "RPM package built."
        - echo "Creating metadata for deployment..."
        # Setup bintray metadata.
        - ci_scripts/create_bintray_descriptors_from_templates
        # Setup github metadata.
        - ci_scripts/tag_release
        - echo "Metadata created."
      deploy:
        # To GitHub releases.
        - provider: releases
          api_key: "${GITHUB_TOKEN}"
          file_glob: true
          file:
            - target/debian/*.deb
            - target/release/rpmbuild/RPMS/x86_64/*.rpm
          skip_cleanup: true
          on:
            all_branches: true
        # To my debian repository at Bintray.
        - provider: bintray
          file: "packaging/steganer_debian_bintray_descriptor.json"
          user: "${BINTRAY_USERNAME}"
          key: "${BINTRAY_KEY}"
          skip_cleanup: true
          on:
            all_branches: true
        # To my RPM repository at Bintray.
        - provider: bintray
          file: "packaging/steganer_rpm_bintray_descriptor.json"
          user: "${BINTRAY_USERNAME}"
          key: "${BINTRAY_KEY}"
          skip_cleanup: true
          on:
            all_branches: true